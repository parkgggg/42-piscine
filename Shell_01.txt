Ex01
-환경변수는 "export [환경변수명]=값"을 통해 생성 가능
-단순 호출은 "echo $[환경변수명]"로 가능

코드
id -Gn $FT_USER | tr " " "," | tr -d "\n"

*같은 그룹에 있는 사용자(같은 권한을 갖는다)들은 특정 폴더나 파일을 공유가능
Id: 사용자가 속한 그룹의 정보를 출력해주는 명령어
    -g:사용자가 속한 첫번째 그룹의 id번호를 출력 
    -G:사용자가 속한 추가적인(모든) 그룹의 id번호를 출력
    -n:g나 G와 같이쓰이며, 그룹의 id번호가 아닌 그룹명으로 출력

$FT_USER: 환경변수 호출
|: 파이프라인 왼쪽에 있는 명령의 출력값이 오른쪽에 있는 명령어의 입력값이 됨(명령어 연결, 파이프라인)
tr: translate 특정 문자를 교체, 삭제하는 명령어
tr " " "," : 공백을 쉼표로 교체
tr -d "\n": -d옵션을 사용하면 특정문자 삭제, 개행문자 삭제


Ex02

코드 
find . -type f -name"*.sh" -exec basename -s ".sh" {} \;

*:와일드카드, 한 개이상의 어떤 문자를 대체함
?:와일드카드, 한 개의 어떤 문자를 대체함
=>와일드카드는 ""안에서는 기능 못 함

find: 파일이나 디렉토리를 검색하는 기능
      -name: 지정한 문자열 패턴이 갖는 파일, 디렉토리 검색 
      -exec: 검색한 후에 뒤의 명령어를 실행
	     {} -> find에서 찾아낸 결과값들이 하나씩 들어감
	     \; -> exec뒤의 명령어를 실행시키기 위해 필요(뒤의 명령문의 끝을 의미)(-exec와 짝이며, 없으면 실행 불가)
       Find . : 현재 디렉토리를 포함한 하위 디렉토리까지 검색
Basename: 디렉토리를 제외한 파일명+확장자만 추출해주는 명령
	  -s: 뒤에 명시해주는 확장자만 제거
-type :특정 타입에 해당하는 파일만 찾는다.
      
Ex03

코드

find . | wc -l

find는 위의 문제 참고, 
wc: word count->주어진 파일또는 입력의 바이트, 문자, 단어 혹은 라인의 수를 출력
    -l: 줄 수 , 라인 수를 출력 

Ex04

코드
ifconfig -a | grep "ether " | cut -d " " -f 2

Ifconfig: 현재 네트워크 설정과 관련된 정보들을 출력 
	-a: 모든 네트워크 정보를 출력
grep: 파일이나 입력된 내용에서 특정 문자열을 추출
	grep "ether "는 문자열에 "ether "가 들어간 라인을 출력
cut: 파일에서 필드를 추출, 필드 구분은 사용자 설정 가능 
    -d: 필드를 구분하는 문자를 지정(디폴트는 탭)
    -f: 지정한 필드를 추출

Ex05

특수문자를 문자 그대로 사용하는 법:
'': 작은 따음표로 감싼 모든 특수 기호는 일반 문자화되어 처리된다.
"": 큰 따옴표로 ", \, $, `를 제외한 모든 특수 기호가 일반 문자화되어 처리된다. -> ", \, $, `출력하려면 앞에 \붙여줘야함
touch 명령어와 작은 따옴표를 사용해 파일이름을 설정하고 vi에디터 사용해서  42만 넣어준다.
touch -t랑 chmod를 사용해서 타임스탬프와 접근권한을 설정한다.

Ex06

코드
ls -l | sed 'n; d'
sed: 원본 파일에 출력결과를 덮어 씌우지 않는 한 원본은 수정되지 않는다. 파일을 명령 스크립트에 따라 수정/변경해 출력하는 명령어
	-n플래그: 입력받은 라인을 암시적으로 자동출력하는 것을 중단
	명령 스크립트내의 부속 명령
		=>n:다음 행으로 넘어감
		=>d:현재 영역의 행을 삭제




Ex07

코드
cat /etc/passwd | grep -v "^#" | sed '1d' | sed 'n; d' | cut -d':' -f1 | rev | sort -r | sed -n "$FT_LINE1, $FT_LINE2 p" | tr "\n" "," | sed 's/,/, /g' | sed 's/, $/./' | tr -d '\n'


grep: 입력된 내용이나 파일에서 특정 문자열을 찾는 명령어
	-v:지정한 패턴이 존재하지 않는 라인만 선택
	^:(메타문자) 문자열라인의 처음 -> ^# : #으로 시작하는 문자열
Sed "1d" : 1번째 줄 삭제
Sed 'n; d': '다음 줄; 줄 삭제'
Cut: 파일에서 지정한 필드를 추출
     -d":" -f1=> :를 기준으로 구분한 필드들 중 첫 번째 필드만 추출
Rev: 행 뒤집기
Sort: 파일이나 입력을 정렬 => 디폴트는 내림차순, -r 옵션 사용시 오름차순
"$FT_LINE1, $FT_LINE2 p": ft_line1부터 ft_line2까지의 라인을 p(출력)한다.
tr "\n" ",": tr은 지정 문자를 교체하거나 삭제하는 명령 => 입력 내용의 모든 개행문자를 쉼표료 교체 
sed 's/,/, /g': 부속명령 s는 switch(교체), g는 global(라인 전체) => 전체 내용에서 ","를 ", "로 바꿔준다
sed 's/, $/./': ", $": 메타문자 $는 문자열 라인의 마지막을 뜻함. 문자열 마지막이 ", "으로 끝나는 라인의 끝은
				"."로 교체해줌
tr -d '\n': 마지막에 생긴 개행문자를 삭제해줌



Ex08

코드
echo $FT_NBR1 + $FT_NBR2 | tr "mrdoc" "01234" | sed "s/\'/0/g" | sed 's/\\/1/g' | sed "s/\"/2/g" | sed 's/?/3/g' | sed 's/!/4/g' | xargs echo "obase=13; ibase=5;" | bc | tr "0123456789ABC" "gtaio luSnemf"


환경 변수 ft_nbr1과 ft_nbr2를 출력 -> mrdoc는 01234로 각각 대응시켜 교체 -> 
https://www.ibm.com/docs/ko/aix/7.2?topic=s-sed-command -> sed 정리

https://recipes4dev.tistory.com/157

